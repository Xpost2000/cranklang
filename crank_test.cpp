// Preamble generated by CrankLang
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <string>
#include <vector>
int  out_of_order_is_okay();
int  square(int  x);
int  gcd(int  a, int  b);
std::string  digit_to_string(int  number);
int  what_is_this_thing(int  x);
void  generate_times_table(int  x, int  y);
int  crank_mainpoint_entry(int  argc, std::string  arguments[]);
int  out_of_order_is_okay()
{
return what_is_this_thing(3);
}
int  square(int  x)
{
return x*x;;
}
int  gcd(int  a, int  b)
{
if (b==0) 
return a;

 else return gcd(b, a%b);

}
std::string  digit_to_string(int  number)
{
if (number==0) 
return "zero";

 else if (number==1) 
return "one";

 else if (number==2) 
return "two";

 else if (number==3) 
return "three";

 else if (number==4) 
return "four";

 else if (number==5) 
return "five";

 else if (number==6) 
return "six";

 else if (number==7) 
return "seven";

 else if (number==8) 
return "eight";

 else if (number==9) 
return "nine";











}
int  what_is_this_thing(int  x)
{
return square(x+5);
}
void  generate_times_table(int  x, int  y)
{
int  x1 = 0;
;while (x1<=x) 
{
printf("%-6d ", x1);x1+=1;}

printf("\n");x1=0;while (x1<=x) 
{
int  y1 = 0;
;while (y1<=y) 
{
printf("%-6d ", x1*y1);y1+=1;}

x1+=1;printf("\n");}

}
int  crank_mainpoint_entry(int  argc, std::string  arguments[])
{
int  i = 0;
;printf("hello world! There are %d arguments\n", argc);int  j = 0;
;while (j<25) 
{
printf("%d\n", square(j));j+=1;}

printf("5 + 10 * 4 - 5 = %d\n", 5+10*4-5);if (j==25) 
{
printf("not sure if this works\n");}

 else {
printf("maybe\n");}

{
printf("HIII GCD TEST\n");int  x = 0;
;while (x<16) 
{
int  y = 0;
;while (y<16) 
{
printf("The GCD of %d and %d is %d\n", x, y, gcd(x, y));y+=1;}

x+=1;}

}
{
int  number = 987245;
;printf("We're going to dissect the number \"%d\"\n", number);while (number>0) 
{
int  digit = {};
;digit=number%10;printf("%s", digit_to_string(digit).c_str());number/=10;if (number>0) 
printf("-");

}

printf("\n");}
while (i<argc) 
{
printf("argument: %s\n", arguments[i].c_str());i+=1;}

generate_times_table(12, 12);printf("%d?\n", out_of_order_is_okay());return 0;
}

/**
   This file is copy and pasted wholesale,

   DO NOT TOUCH ME!

   ASSUMED std::string is usable, and vector!
**/

int main(int argc, char** argv) {
    std::vector<std::string> arguments;
    for (int i = 0; i < argc; ++i) {
        arguments.push_back(argv[i]);
    }

    return crank_mainpoint_entry(arguments.size(), arguments.data());
}
