/*
        Enums will generally behave like enums
        in other languages.

        Enums MUST have a type though. Only integral
        types are valid.

        Enums can also be indexed.
        Enums have some properties.

        Enums are also scoped.
*/

// imply starting at 0
typedef LightSignal: enum s32 {
        RED,
        BLUE,
        GREEN,
};

typedef BasicConstantExpressions : enum i64 {
        OnePlusThree = 1 + 3,
};

typedef TestFlagBinary: enum u64 {
        a = 0b0,
        b = 0b1,
        c = 0b10,
        d = 0b11,
        e = 0b100,
};
typedef TestFlagHex: enum u64 {
        a = 0x0,
        b = 0x1,
        c = 0x2,
        d = 0x3,
        e = 0x4,
        f = 0x5,
        g = 0x6,
        h = 0x7,
        i = 0x8,
        j = 0x9,
        k = 0xA,
        l = 0xb,
        m = 0xc,
        n = 0xd,
        o = 0xe,
        p = 0xf,
        q = 0x10,
        r = 0x11,
        s = 0x12,
        t = 0xFF,
};

// NOTE:
// these are generated as normal enums with a prefix.
// Numbers_NegativeFive

/*
This is not possible right now because we need to figure out if expressions
can be constant folded.

NOTE: for now only actual constants should be folded. Function calls are not allowed!
*/

typedef Numbers: enum s8 {
        NegativeFive = -5,
        NegativeFour,
        NegativeThree,
        NegativeTwo,
        NegativeOne,
        Zero,
        One,
        Two,
        Three,
        Four,
        Five,
}

typedef numbers2: enum s8 {
        A = 3,
        B,
        C,
        D = 10,
        E,
}

printf: extern int(fmt: char*, ...);

main: int(argc: int, argv: strlit[]) {
      // to remove ambiguity.
      // NOTE: I don't have a lot of array behaviors right now
      // so I might have to think of something...

      // printf("%d, %d, %d\n", Numbers.NegativeFive, Numbers.One, Numbers.Two);


      // The for loop is a little more "powerful"
      // in this language, solely because I don't have multiple declaration
      // nor the comma operator.

      // So this modification to the traditional for loop syntax allows me to do interesting
      // things

      /*
        The grammar for a for loop is really more like

        for
                INITIALIZATION STATEMENTS (0 or more declarations)

                CONDITION EXPRESSION

                POST LOOP STATEMENTS

                parenthesis optional
      */

      printf("Here's an interesting for loop");

      for i: int = 3, j: int = 13; i < j; i += 1, j -= 1
      {
          printf("i: %d, j: %d\n", i, j);
      }

      printf("I want to get an enum!!! %d %d\n", numbers2.A, numbers2.D + LightSignal.RED);

      return 0;
};