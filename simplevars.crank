square: int(x: int) {
        return x * x;
};

digit_to_string: strlit(number: int) {
  if (number == 0) return "zero";
  else if (number == 1) return "one";
  else if (number == 2) return "two";
  else if (number == 3) return "three";
  else if (number == 4) return "four";
  else if (number == 5) return "five";
  else if (number == 6) return "six";
  else if (number == 7) return "seven";
  else if (number == 8) return "eight";
  else if (number == 9) return "nine";
};

main: int(argc: int, arguments: strlit[]) {
      i: int = 0;
      printf("hello world! There are %d arguments\n", argc);

      // need to be careful
      // it turns out we need parenthesis

      j: int = 0;
      while (j < 25) {
            printf("%d\n", square(j));
            j += 1;
      }

      printf("5 + 10 * 4 - 5 = %d\n", 5 + 10 * 4 - 5);

      if (j == 25) {
         printf("not sure if this works\n");
      } else {
         printf("maybe\n");
      }

      {
        number: int = 987245;
        printf("We're going to dissect the number \"%d\"\n", number);

         while (number > 0) {
         // don't know why this fails
          //     digit: int = number % 10;
               printf("%s", digit_to_string(number % 10).c_str());
               number /= 10;
               if (number > 0) printf("-");
         }
        printf("\n");
      }


      while (i < argc)
      {
      // This is technically an alternate C++ syntax.
      // which is BAD
      // I have to avoid this.
      // For now I should presume that strings are generally objects?
      // and need methods.
      printf("argument: %s\n", arguments[i].c_str());
      i += 1;
      }

      return 0;
};