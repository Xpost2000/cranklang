/*
    NOTE: this is before I have multiple modules
    so this is currently in one giant file

    This uses raylib.

    This is the battle test!

    Also, don't take this as a judge of code quality. I'm just
    seeing if I can get anything to even work in the language.
*/

// NOTE: include
// sort of works like C include, but it's not
// really "preprocessing" where we arbitrarily include text
// it will only scan for ".crank", otherwise it will not scan in.
include "raylib_partial"
include "common_stuff"

typedef PaddleSide : enum u8 {
        Left,
        Right,
};

typedef Paddle: struct {
    side: PaddleSide = PaddleSide.Left;

    x: f32 = 0;
    y: f32 = 0;
    w: f32 = 0;
    h: f32 = 0;
};


BALL_MAX_SPEED: int = 600;
BALL_DEFAULT_SPEED: int = 200;
typedef Ball: struct {
        x: f32 = 0;
        y: f32 = 0;
        radius: f32 = 25;
        speed: f32 = BALL_DEFAULT_SPEED;
        direction: Vec2 = Vec2: {1, 0};
};


typedef GameState: struct {
        // arrays cannot be default init as of this moment lol
        // should be a quickfix
        paddles: Paddle[2]; 
        ball: Ball;
        scores:  int[2];
        quit: bool = false;
};


// UI Constants
DEFAULT_FONT_SIZE: int = 32;
PADDING_X: int = 22;
PADDING_Y: int = 22;
PONG_PADDLE_SPEED: int = 250;

draw_ui: void(state: GameState*) {
    DrawText(fmt("Player 1: %d", state.scores[0]), PADDING_X, PADDING_Y, DEFAULT_FONT_SIZE, Color: {255, 0, 0, 255});

    {
        // left align this text
        text: char* = fmt("Player 2: %d", state.scores[1]);
        DrawText(text, 1024 - (MeasureText(text, DEFAULT_FONT_SIZE) + PADDING_X), PADDING_Y, DEFAULT_FONT_SIZE, Color: {0, 0, 255, 255});
    }
};

draw_paddle: void(paddle: Paddle*) {
    color: Color;

    if paddle.side == PaddleSide.Left {
       color = Color: {255, 0, 0, 255};
    } else {
       color = Color: {0, 0, 255, 255};
    }

    DrawRectangle(paddle.x, paddle.y, paddle.w, paddle.h, color);             
};

paddle_intersect_ball: bool(paddle: Paddle*, ball: Ball*) {
   return (ball.x < paddle.x + paddle.w) &&
           (paddle.x < ball.x + ball.radius) &&
           (ball.y < paddle.y + paddle.h) &&
           (paddle.y < ball.y + ball.radius);
};

draw_ball: void (ball: Ball*) {
    DrawRectangle(ball.x, ball.y, ball.radius, ball.radius, Color: {255,255,255,255});             
};

clamp_paddle_position: void(paddle: Paddle*) {
  if paddle.y <= 0 {
    paddle.y = 0;
  }
  else if paddle.y + paddle.h >= 768 {
    paddle.y = 768 - paddle.h;
  }
};

reset_ball_position: void(state: GameState*) {
    ball: Ball* = &state.ball;
    ball.x = 512 + ball.radius/2;
    ball.y = 384 + ball.radius/2;
    ball.speed = BALL_DEFAULT_SPEED;
};

ball_get_round_winner: i32(ball: Ball*) {
   if ball.x <= 0.0 {
      return 1;
   } else if (ball.x + ball.radius) >= 1024 {
      return 0;
   }

   return -1;
};

main: int(argc: int, argv: strlit[]) {
      game_state: GameState;

      game_state.scores[0] = 0;
      game_state.scores[1] = 0;

      game_state.paddles[0].side = PaddleSide.Left;
      game_state.paddles[0].w = game_state.paddles[1].w = 30;
      game_state.paddles[0].h = game_state.paddles[1].h = 60;

      PONG_PADDLE_MARGIN: int = 45;
      game_state.paddles[0].x = 0 + PONG_PADDLE_MARGIN;
      game_state.paddles[1].x = 1024 - (game_state.paddles[1].w + PONG_PADDLE_MARGIN);

      game_state.paddles[1].side = PaddleSide.Right;
      game_state.paddles[1].y = game_state.paddles[0].y = 768/2 - game_state.paddles[0].h/2;

      InitWindow(1024, 768, "Hello Cranky Pong!");
      InitAudioDevice();
      SetTargetFPS(60);

      reset_ball_position(&game_state);

      srand(time(0));

      hit_sound: Sound = LoadSound("assets/beep.wav");

      while !game_state.quit && !WindowShouldClose() {
            dt: f32 = GetFrameTime();

            if IsKeyPressed(Key.KEY_Q) game_state.quit = true;

            BeginDrawing();

            ClearBackground(Color: {});

            draw_ui(&game_state);
            draw_paddle(&game_state.paddles[0]);
            draw_paddle(&game_state.paddles[1]);
            draw_ball(&game_state.ball);

            {
                paddle_target: Paddle* = &game_state.paddles[0];

                if IsKeyDown(Key.KEY_S) {
                   paddle_target.y += (dt * PONG_PADDLE_SPEED);
                }
                if IsKeyDown(Key.KEY_W) {
                   paddle_target.y -= (dt * PONG_PADDLE_SPEED);
                }
            }

            {
                paddle_target: Paddle* = &game_state.paddles[1];

                if IsKeyDown(Key.KEY_DOWN) {
                   paddle_target.y += (dt * PONG_PADDLE_SPEED);
                }
                if IsKeyDown(Key.KEY_UP) {
                   paddle_target.y -= (dt * PONG_PADDLE_SPEED);
                }
            }

            clamp_paddle_position(&game_state.paddles[0]);
            clamp_paddle_position(&game_state.paddles[1]);
            
            { // update the ball
                ball: Ball* = &game_state.ball;
                // move the ball
                {
                    ball.x += dt * ball.speed * ball.direction.x;
                    ball.y += dt * ball.speed * ball.direction.y;
                }

                // check for ball bounces
                {
                    if
                        paddle_intersect_ball(&game_state.paddles[0], ball) ||
                        paddle_intersect_ball(&game_state.paddles[1], ball)
                    {
                       if ball.speed <= BALL_MAX_SPEED {
                          ball.speed += 15;
                       } else {
                          ball.speed = BALL_MAX_SPEED;
                       }
                       
                       ball.direction.x *= -1;
                       ball.direction.y = random_int_ranged(-10, 10) / 10.0;
                       ball.direction = vec2_normalize(ball.direction);
                       PlaySound(hit_sound);
                    }

                    if (ball.y <= 0) || ((ball.y + ball.radius) >= 768) {
                       ball.direction.y *= -1;
                       PlaySound(hit_sound);
                    }
                }

                // check for score intersections
                {
                    scorer: int = ball_get_round_winner(ball);
                    if scorer != -1 {
                       reset_ball_position(&game_state);
                       game_state.scores[scorer] += 1;
                       ball.direction.x = random_int_ranged(-1, 1);
                       ball.direction.y = random_int_ranged(-10, 10) / 10.0;
                       ball.direction = vec2_normalize(ball.direction);
                       PlaySound(hit_sound);
                    }
                }
            }

            EndDrawing();
      }

      CloseWindow();
      return 0;
};

