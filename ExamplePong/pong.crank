/*
    NOTE: this is before I have multiple modules
    so this is currently in one giant file

    This uses raylib.

    This is the battle test!

    Also, don't take this as a judge of code quality. I'm just
    seeing if I can get anything to even work in the language.
*/

// *sigh* the problem with your own programming language
// is that you have to write the bindings yourself...

typedef Color: struct {
    r: u8 = 0;
    g: u8 = 0;
    b: u8 = 0;
    a: u8 = 255;
};

// RAYLIB START
InitWindow: extern void(width: int, height: int, title: char*);
WindowShouldClose: extern bool();
SetTargetFPS: extern void(fps: int);
IsKeyPressed: extern bool(key: int);
IsKeyReleased: extern bool(key: int);
IsKeyUp: extern bool(key: int);
IsKeyDown: extern bool(key: int);
IsKeyPressed: extern bool(key: int);
CloseWindow: extern void();
BeginDrawing: extern void();
EndDrawing: extern void();
fmt: extern("TextFormat") char*(text: char*, ...);
DrawText: extern void(text: char*, posX: int, posY: int, fontSize: int, color: Color);
MeasureText: extern int(text: char*, fontSize: int);
DrawRectangle: extern void(posX: int, posY: int, width: int, height: int, color: Color);
ClearBackground: extern void(color: Color);
GetFrameTime: extern f32();

typedef Key : enum i32 {
    KEY_NULL            = 0,        // Key: NULL, used for no key pressed
    // Alphanumeric keys
    KEY_APOSTROPHE      = 39,       // Key: '
    KEY_COMMA           = 44,       // Key: ,
    KEY_MINUS           = 45,       // Key: -
    KEY_PERIOD          = 46,       // Key: .
    KEY_SLASH           = 47,       // Key: /
    KEY_ZERO            = 48,       // Key: 0
    KEY_ONE             = 49,       // Key: 1
    KEY_TWO             = 50,       // Key: 2
    KEY_THREE           = 51,       // Key: 3
    KEY_FOUR            = 52,       // Key: 4
    KEY_FIVE            = 53,       // Key: 5
    KEY_SIX             = 54,       // Key: 6
    KEY_SEVEN           = 55,       // Key: 7
    KEY_EIGHT           = 56,       // Key: 8
    KEY_NINE            = 57,       // Key: 9
    KEY_SEMICOLON       = 59,       // Key: ;
    KEY_EQUAL           = 61,       // Key: =
    KEY_A               = 65,       // Key: A | a
    KEY_B               = 66,       // Key: B | b
    KEY_C               = 67,       // Key: C | c
    KEY_D               = 68,       // Key: D | d
    KEY_E               = 69,       // Key: E | e
    KEY_F               = 70,       // Key: F | f
    KEY_G               = 71,       // Key: G | g
    KEY_H               = 72,       // Key: H | h
    KEY_I               = 73,       // Key: I | i
    KEY_J               = 74,       // Key: J | j
    KEY_K               = 75,       // Key: K | k
    KEY_L               = 76,       // Key: L | l
    KEY_M               = 77,       // Key: M | m
    KEY_N               = 78,       // Key: N | n
    KEY_O               = 79,       // Key: O | o
    KEY_P               = 80,       // Key: P | p
    KEY_Q               = 81,       // Key: Q | q
    KEY_R               = 82,       // Key: R | r
    KEY_S               = 83,       // Key: S | s
    KEY_T               = 84,       // Key: T | t
    KEY_U               = 85,       // Key: U | u
    KEY_V               = 86,       // Key: V | v
    KEY_W               = 87,       // Key: W | w
    KEY_X               = 88,       // Key: X | x
    KEY_Y               = 89,       // Key: Y | y
    KEY_Z               = 90,       // Key: Z | z
    KEY_LEFT_BRACKET    = 91,       // Key: [
    KEY_BACKSLASH       = 92,       // Key: '\'
    KEY_RIGHT_BRACKET   = 93,       // Key: ]
    KEY_GRAVE           = 96,       // Key: `
    // Function keys
    KEY_SPACE           = 32,       // Key: Space
    KEY_ESCAPE          = 256,      // Key: Esc
    KEY_ENTER           = 257,      // Key: Enter
    KEY_TAB             = 258,      // Key: Tab
    KEY_BACKSPACE       = 259,      // Key: Backspace
    KEY_INSERT          = 260,      // Key: Ins
    KEY_DELETE          = 261,      // Key: Del
    KEY_RIGHT           = 262,      // Key: Cursor right
    KEY_LEFT            = 263,      // Key: Cursor left
    KEY_DOWN            = 264,      // Key: Cursor down
    KEY_UP              = 265,      // Key: Cursor up
    KEY_PAGE_UP         = 266,      // Key: Page up
    KEY_PAGE_DOWN       = 267,      // Key: Page down
    KEY_HOME            = 268,      // Key: Home
    KEY_END             = 269,      // Key: End
    KEY_CAPS_LOCK       = 280,      // Key: Caps lock
    KEY_SCROLL_LOCK     = 281,      // Key: Scroll down
    KEY_NUM_LOCK        = 282,      // Key: Num lock
    KEY_PRINT_SCREEN    = 283,      // Key: Print screen
    KEY_PAUSE           = 284,      // Key: Pause
    KEY_F1              = 290,      // Key: F1
    KEY_F2              = 291,      // Key: F2
    KEY_F3              = 292,      // Key: F3
    KEY_F4              = 293,      // Key: F4
    KEY_F5              = 294,      // Key: F5
    KEY_F6              = 295,      // Key: F6
    KEY_F7              = 296,      // Key: F7
    KEY_F8              = 297,      // Key: F8
    KEY_F9              = 298,      // Key: F9
    KEY_F10             = 299,      // Key: F10
    KEY_F11             = 300,      // Key: F11
    KEY_F12             = 301,      // Key: F12
    KEY_LEFT_SHIFT      = 340,      // Key: Shift left
    KEY_LEFT_CONTROL    = 341,      // Key: Control left
    KEY_LEFT_ALT        = 342,      // Key: Alt left
    KEY_LEFT_SUPER      = 343,      // Key: Super left
    KEY_RIGHT_SHIFT     = 344,      // Key: Shift right
    KEY_RIGHT_CONTROL   = 345,      // Key: Control right
    KEY_RIGHT_ALT       = 346,      // Key: Alt right
    KEY_RIGHT_SUPER     = 347,      // Key: Super right
    KEY_KB_MENU         = 348,      // Key: KB menu
    // Keypad keys
    KEY_KP_0            = 320,      // Key: Keypad 0
    KEY_KP_1            = 321,      // Key: Keypad 1
    KEY_KP_2            = 322,      // Key: Keypad 2
    KEY_KP_3            = 323,      // Key: Keypad 3
    KEY_KP_4            = 324,      // Key: Keypad 4
    KEY_KP_5            = 325,      // Key: Keypad 5
    KEY_KP_6            = 326,      // Key: Keypad 6
    KEY_KP_7            = 327,      // Key: Keypad 7
    KEY_KP_8            = 328,      // Key: Keypad 8
    KEY_KP_9            = 329,      // Key: Keypad 9
    KEY_KP_DECIMAL      = 330,      // Key: Keypad .
    KEY_KP_DIVIDE       = 331,      // Key: Keypad /
    KEY_KP_MULTIPLY     = 332,      // Key: Keypad *
    KEY_KP_SUBTRACT     = 333,      // Key: Keypad -
    KEY_KP_ADD          = 334,      // Key: Keypad +
    KEY_KP_ENTER        = 335,      // Key: Keypad Enter
    KEY_KP_EQUAL        = 336,      // Key: Keypad =
    // Android key buttons
    KEY_BACK            = 4,        // Key: Android back button
    KEY_MENU            = 82,       // Key: Android menu button
    KEY_VOLUME_UP       = 24,       // Key: Android volume up button
    KEY_VOLUME_DOWN     = 25,        // Key: Android volume down button
};

// RAYLIB END

typedef PaddleSide : enum u8 {
        Left,
        Right,
};

typedef Paddle: struct {
    side: PaddleSide = PaddleSide.Left;

    x: f32 = 0;
    y: f32 = 0;
    w: f32 = 0;
    h: f32 = 0;
};

typedef Vec2: struct {
        x: f32 = 0;
        y: f32 = 0;
};

typedef Ball: struct {
        x: f32 = 0;
        y: f32 = 0;
        radius: f32 = 25;
        speed: f32 = 5;
        direction: Vec2 = Vec2: {1, 0};
};

printf: extern int(txt: char*, ...);

typedef GameState: struct {
        // arrays cannot be default init as of this moment lol
        // should be a quickfix
        paddles: Paddle[2]; 
        ball: Ball;
        scores:  int[2];
        quit: bool = false;
};


// UI Constants
DEFAULT_FONT_SIZE: int = 32;
PADDING_X: int = 22;
PADDING_Y: int = 22;
PONG_PADDLE_SPEED: int = 250;

draw_ui: void(state: GameState*) {
    DrawText(fmt("Player 1: %d", state.scores[0]), PADDING_X, PADDING_Y, DEFAULT_FONT_SIZE, Color: {255, 0, 0, 255});

    {
        // left align this text
        text: char* = fmt("Player 2: %d", state.scores[1]);
        DrawText(text, 1024 - (MeasureText(text, DEFAULT_FONT_SIZE) + PADDING_X), PADDING_Y, DEFAULT_FONT_SIZE, Color: {0, 0, 255, 255});
    }
};

draw_paddle: void(paddle: Paddle*) {
    color: Color;

    if paddle.side == PaddleSide.Left {
       color = Color: {255, 0, 0, 255};
    } else {
       color = Color: {0, 0, 255, 255};
    }

    DrawRectangle(paddle.x, paddle.y, paddle.w, paddle.h, color);             
};

draw_ball: void (ball: Ball*) {
    DrawRectangle(ball.x, ball.y, ball.radius, ball.radius, Color: {255,255,255,255});             
};

clamp_paddle_position: void(paddle: Paddle*) {
  if paddle.y <= 0 {
    paddle.y = 0;
  }
  else if paddle.y + paddle.h >= 768 {
    paddle.y = 768 - paddle.h;
  }
};

reset_ball_position: void(state: GameState*) {
    ball: Ball* = &state.ball;
    state.ball.x = 512 + state.ball.radius/2;
    state.ball.y = 384 + state.ball.radius/2;
};

main: int(argc: int, argv: strlit[]) {
      game_state: GameState;

      game_state.scores[0] = 0;
      game_state.scores[1] = 0;

      game_state.paddles[0].side = PaddleSide.Left;
      game_state.paddles[0].w = game_state.paddles[1].w = 30;
      game_state.paddles[0].h = game_state.paddles[1].h = 60;

      PONG_PADDLE_MARGIN: int = 45;
      game_state.paddles[0].x = 0 + PONG_PADDLE_MARGIN;
      game_state.paddles[1].x = 1024 - (game_state.paddles[1].w + PONG_PADDLE_MARGIN);

      game_state.paddles[1].side = PaddleSide.Right;
      game_state.paddles[1].y = game_state.paddles[0].y = 768/2 - game_state.paddles[0].h/2;

      InitWindow(1024, 768, "Hello Cranky Pong!");
      SetTargetFPS(60);

      reset_ball_position(&game_state);

      while !game_state.quit && !WindowShouldClose() {
            dt: f32 = GetFrameTime();

            if IsKeyPressed(Key.KEY_Q) game_state.quit = true;

            BeginDrawing();

            ClearBackground(Color: {});

            draw_ui(&game_state);
            draw_paddle(&game_state.paddles[0]);
            draw_paddle(&game_state.paddles[1]);
            draw_ball(&game_state.ball);

            {
                paddle_target: Paddle* = &game_state.paddles[0];

                if IsKeyDown(Key.KEY_DOWN) || IsKeyDown(Key.KEY_S) {
                   paddle_target.y += (dt * PONG_PADDLE_SPEED);
                }

                if IsKeyDown(Key.KEY_UP) || IsKeyDown(Key.KEY_W) {
                   paddle_target.y -= (dt * PONG_PADDLE_SPEED);
                }
            }

            clamp_paddle_position(&game_state.paddles[0]);
            clamp_paddle_position(&game_state.paddles[1]);
            
            EndDrawing();
      }

      CloseWindow();
      return 0;
};

