// basic vector implementation 
typedef Vec2: struct {
        x: f32 = 0;
        y: f32 = 0;
};

vec2: Vec2(x: f32, y: f32) {
      // Whoops, forgot to take into account the
      // case where you have symbols in the initializer.
      // need to make that allowed in the compiler later, but
      // it's not a deal breaker.
      return Vec2: {x: x, y: y};
};

vec2_length_sq: f32(a: Vec2) {
    return (a.x*a.x + a.y*a.y);
};

vec2_length: f32(a: Vec2) {
    return sqrtf(vec2_length_sq(a));
};

vec2_normalize: Vec2(a: Vec2) {
    length: f32 = vec2_length(a);
    result: Vec2 = Vec2: { 0, 0 };

    result.x = a.x / length;
    result.y = a.y / length;
    return result;
};

// some stdlib select things
printf: extern int(txt: char*, ...);
sqrtf: extern f32(v: f32);
time: extern u64(ptr: void*);
srand: extern void(seed: u32);
rand: extern int();

random_int_ranged: s32(min: s32, max: s32) {
    range: s32 = max - min;
    return (rand() % range) + min;
};