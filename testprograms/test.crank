out_of_order_is_okay: int() {
    return what_is_this_thing(3);
};

// Requires two semicolons due to the way parsing works.
square: int(x: int) x * x;;

gcd: int(a: int, b: int)
if b == 0 return a;
else return gcd(b, a % b);;

function_without_definition: int(x: int);

digit_to_string: strlit(number: int) {
    if      number == 0 return "zero";
    else if number == 1 return "one";
    else if number == 2 return "two";
    else if number == 3 return "three";
    else if number == 4 return "four";
    else if number == 5 return "five";
    else if number == 6 return "six";
    else if number == 7 return "seven";
    else if number == 8 return "eight";
    else if number == 9 return "nine";
};

what_is_this_thing: int(x: int) {
    return square(x+5);
};

generate_times_table: void(x: int, y: int) {
x1: int = 0;
    while (x1 <= x) {
        printf("%-6d ", x1);
        x1 += 1;
    }
    printf("\n");
    x1 = 0;
    while (x1 <= x) {
    y1: int = 0;
        while (y1 <= y) {
            printf("%-6d ", x1 * y1);
            y1 += 1;
        }

        x1 += 1;
        printf("\n");
    }
};

main: int(argc: int, arguments: strlit[]) {
i: int = 0;
    printf("hello world! There are %d arguments\n", argc);

    // need to be careful
    // it turns out we need parenthesis

j: int = 0;
    while (j < 25) {
        printf("%d\n", square(j));
        j += 1;
    }

    printf("5 + 10 * 4 - 5 = %d\n", 5 + 10 * 4 - 5);

    if (j == 25) {
        printf("not sure if this works\n");
    } else {
        printf("maybe\n");
    }

    {
        printf("HIII GCD TEST\n");
        x: int = 0;
        while x < 16 {
            y: int = 0;
                while y < 16 {
                        printf("The GCD of %d and %d is %d\n", x, y, gcd(x, y));
                        y += 1;
                    }
                x += 1;
            }
    }

    {
    number: int = 987245 * 5 - 100;
        printf("We're going to dissect the number \"%d\"\n", number);

        while (number > 0) {
            // NOTE:
            // digit: int = (expression) will not work.
            // I need to evaluate the type to do stuff.

        digit: int;
            digit = number % 10;
            printf("%s", digit_to_string(digit).c_str());
            number /= 10;
            if (number > 0) printf("-");
        }
        printf("\n");
    }


    while (i < argc)
    {
        // This is technically an alternate C++ syntax.
        // which is BAD
        // I have to avoid this.
        // For now I should presume that strings are generally objects?
        // and need methods.
        printf("argument: %s\n", arguments[i].c_str());
        i += 1;
    }

    generate_times_table(12, 12);
    printf("%d?\n", out_of_order_is_okay());

    MessageBox(0, "test", "hello world", 0);

    return 0;
};
